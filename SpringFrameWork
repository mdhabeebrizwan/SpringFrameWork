
inshallah we will start spring frame work
spring is the dependency injection frame work
Dependency:web(ui)-->bussiness layer--Data Layer
Bussiness layer is Dependent on Data Layer
suppose i want to show something to uservbdcnyut,m 
user layer is dependent on Bussiness Layer and bussiness layer is dependent on Data Layer

public class ComplexBusinessService
{
	SortAlgorith sortAlgorith;
}
To sort the given number ComplexBuss-> is Dependent on sortalgorithm,so sortalgorith is dependency of Complesbussiness

Before spring
public class ComplexBusinessService
{
	SortAlgorithm sortAlgorithm = new BubbleSortAlgorithm();

}
public class BubbleSortAlgorithm implements SortAlgorithm


in the above code ComplexBussiness is tight coupled with Bubblesort which is not good code 
ComplexBussiness is directly instantiate the BubbleSortAlgorithm suppose we want other sorting algorithm again i have instantiate quick which is not a good practice
How do we make this code loosely coupled.we remove tight coupling by removing by removing instantiation

SortAlgorithm soetAlgorithm = new BubbleSortAlgorithm();

ComlplexBusinessService businessService = new ComplexBusinessService(sortAlgorithm);

This code is good because this is loosely Coupled Programming.
what we doing hear we are instantiate object and populate the dependecies.
The same task will be done by springboot frame work user has specify the what are the identified objects and what are its dependencies,There are two comportant annotations that are present using which you can tell this to spring framework.that is what are the objects it needs to manage? and what are the dependencies of your particular class?
the annoatation is @componets
@componet
public class ComplexBusinessService
{
  @Autowired
	SortAlgorithm sortAlgorith;
}

@component 
public class BubbleSortAlgorithm implements SortAlgorithm

we are putting an @component on the of the complex bussiness service and the bubble sort,this is where we are telling spring ok you need to start managing instances of the comples business and bubble sort algorithm,and spring knows it needs to manage the instances of these two classes but how do you tell that this sort is dependent on Complex Class

The way you do that is by using another annotation @Autowired.as soon as you put @component it means that spring starts to manage instances of that class.and as soon as you put @Autowired that means spring would start looking for this dependency,it would start looking among the components it manages to find a matching thing for this sort alogrithm,so spring would internally do this.
The few terminology which are frequently associated wuth spring
Teminology 
1)Beans
2) Autowiring
3)Dependency Injection
4)Inversion of Control
5)IOC Container
6)Application Context

1)The First Terminolgy is Beans.
@componet
public class ComplexBusinessService
{
  @Autowired
	SortAlgorithm sortAlgorith;
}
@component 
public class BubbleSortAlgorithm implements SortAlgorithm

we are telling spring framework to create instances of the complex and bubble sort these are instances that spring manages.these are called beans.Beans are different objects that are managed by this spring framework.
2)Autowiring
The process where spring identifies the dependences,identifies the matches for the dependencies and populates them.
that process is called auto wiring.
so basically spring finds the right sort algorithm.it finds the bubble sort algorithn and crates an instance of that algorithm and pass them to ComplexBussiness Class
3)Dependency Injection 
spring framework understand the different annotations that you are putting on top of your classes,we are injecting this algorithm as dependency into the complex bussiness
4)Inversion of control

a)public class ComplexBusinessService
{
	SortAlgorithm sortAlgorithm = new BubbleSortAlgorithm();

}
public class BubbleSortAlgorithm implements SortAlgorithm

who is creating the instance of dependency in this example?
The class which needs it so the class which needs the dependency create an instance of the dependency
b)@componet
public class ComplexBusinessService
{
  @Autowired
	SortAlgorithm sortAlgorith;
}
@component 
public class BubbleSortAlgorithm implements SortAlgorithm

who is creating the instance of dependency in this example?
the spring framework is creating the instance in here. we are taking the control from the class that needs the dependency and giving the control to the framework to the spring framework and this is called inversion of control.

5)IOC Container
IOC Container is a generic terminology to represent anything that is implementing inversion of control.
In the case of spring framework the typical IOC container is the application context

6)Application context
is the one where all the beans are created and managed. application context is the most important part of the spring framework that is where all the core logic of spring frame work happens..
Autowired -- constructor,setter Method
@Component

we have three different options of resolving,multiple candidates avaiable for auto wiring.
so we got the application context by running the spring boot application class using the spring appliction

@primary
@name
@qualifier(Bubble)

@springBootApplication
it will automatically scans the package and the sub packages of the package where this is in.
Bean Scope
Default Singleton
when we are trying to get different instances of binary search what we are getting is the same bean
BinarySearchImpl binarySearch = applicationContext.getBean(BinarySearchImpl.class);
BinarySearchImpl binarySearch1= applicationContext.getBean(BinarySearchImpl.class);
@81f160
@81f160
This here we are refferring to the same object when you trying to get different instances of binary serch from the application context,what we geting  is the same bean.when we requesting the application context for the same bean twice we are getting the same instance of it back.
These kind of beans are called singleton beans.
in spring by default any bean is a singleton beans
a)Singleton - One instance per Spring Context
b)Prototype -New Bean whenever REQUESTED
c)request -One bean per HTTP request
d)session - One bean per HTTP USER Session(specific user)
By Default every bean scope is singleton we change by specify scope to Binary class
@scope("prototype")
after running we will get different scope.we asking Application context 2 Binary search using @prototype
Hardcoding prototype here is not really a good practice what we can do is use configurableBeanFactory.
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)

@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE,proxymode =ScopeProxyMode.TARGET_CLASS)
if we really want to have a different instance of the JDBCCONNECTION whenever we have a request for PersonDao than we need to configure something called a proxy

Difference between Spring Singleton and Gang of Four SingleTon

SpringContext SingleTon
when ever obn the same instance of PersonDao if iam calling getJdbcConnection again what would happend it would actually get new JdbcConnection(PROTOTYPE)
LOGGER.info(personDao.gerJdbcConnection());
LOGGER.info(personDao.gerJdbcConnection());

now i have two different JDBCConnecyion 
@3327729ad
@752da2d

 package com.in28minutes.spring.basics.springin5steps.scope;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Component;

@Component
@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE, 
		proxyMode = ScopedProxyMode.TARGET_CLASS)
public class JdbcConnection {
	public JdbcConnection() {
		System.out.println("JDBC Connection");
	}
}


Total 3 
SO THE SCOPE PROXY IS VERY IMPORTANT ESPECIALLY WHEN Even on the same instance(PERSONDAO)iam calling twice i will get two different for single instace call
Tht is the reason why a proxy becomes very important.wah wuld happen is ,instead of the JDBC CONNECTION AUTOWIRED into PersonDao,what would be autowired in,is something called a proxy so a proxu gets autowired in here,and whenever you call the getJdbcConnection the proxy would make sure taht it would retun the JDBC CONNECTION BACK


Difference Between GOF Design Pattern and Spring Singleton
in the Gof whenever they say singleTon it basically means one singleton per JVM,PER jvm you have one instanceof the beam howeever singleton in spring one instance per applicationcontect,in GOF Even if multiple application contexts are running in the same JVM,YOU Should just have one instance of that specific class,However when we talk about spring singleton there can be one instance of that class per one application context.
If their are five application contexts that are running in single JVM then if i hava spring beans of scope singleton then i will have five instances.However if you are having a singleton which meets the defination of Gang of Four design Pattern Singleton,there will only be one instances
 example
public class SpringIn5StepsScopeApplication {
	
	private static Logger LOGGER = 
			LoggerFactory.getLogger(SpringIn5StepsScopeApplication.class); 
	
	public static void main(String[] args) {

		ApplicationContext applicationContext = 
				SpringApplication.run(SpringIn5StepsScopeApplication.class, args);
		
		PersonDAO personDao = 
				applicationContext.getBean(PersonDAO.class);
		
		PersonDAO personDao2 = 
				applicationContext.getBean(PersonDAO.class);
		
		LOGGER.info("{}", personDao);
		LOGGER.info("{}", personDao.getJdbcConnection());
		
		LOGGER.info("{}", personDao2);
		LOGGER.info("{}", personDao.getJdbcConnection());
		
	}
}

Using Component Scan to scan for beans

ComponentDAP.JAVA  and
ComponentjdbcConnection.java IS IN in28minutes/spring/basics/componentscan/ComponentDAO.java Pakage 


[
/src/main/java/com/in28minutes/spring/basics/componentscan/ComponentDAO.java
package com.in28minutes.spring.basics.componentscan;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class ComponentDAO {

	@Autowired
	ComponentJdbcConnection jdbcConnection;

	public ComponentJdbcConnection getJdbcConnection() {
		return jdbcConnection;
	}

	public void setComponentJdbcConnection(ComponentJdbcConnection jdbcConnection) {
		this.jdbcConnection = jdbcConnection;
	}
}

/src/main/java/com/in28minutes/spring/basics/componentscan/ComponentJdbcConnection.java
package com.in28minutes.spring.basics.componentscan;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Component;

@Component
@Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE, 
		proxyMode = ScopedProxyMode.TARGET_CLASS)
public class ComponentJdbcConnection {
	public ComponentJdbcConnection() {
		System.out.println("JDBC Connection");
	}
}]
But SpringIn5StepsComponentScanApplication.java is another package {src/main/java/com/in28minutes/spring/basics/springin5steps/SpringIn5StepsComponentScanApplication.java
 }


when we run the applications it will throw an exception in main thread  it saying i can not find such thread with defination that is i cant fine ComponentDao for you what is the problem?
the reason why this is not being pickup is because this pakage wherever it is present is not part of the componentscan class so what happens is here we are saying springBootApplication. when erver we say to @SpringBootApplication it automatically defines a componentScan on this package,it is almost like saying @ComponentScan is another annotation,it will  scan all package present inside however the things in other packages are not picked up so if i want other package to be picked up we have define the package in Component Scan()
package com.in28minutes.spring.basics.springin5steps;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;

import com.in28minutes.spring.basics.componentscan.ComponentDAO;

@SpringBootApplication
@ComponentScan("com.in28minutes.spring.basics.componentscan")
public class SpringIn5StepsComponentScanApplication {
	
	private static Logger LOGGER = 
			LoggerFactory.getLogger(SpringIn5StepsComponentScanApplication.class); 
	
	public static void main(String[] args) {

		ApplicationContext applicationContext = 
				SpringApplication.run(SpringIn5StepsComponentScanApplication.class, args);
		
		ComponentDAO componentDAO = 
				applicationContext.getBean(ComponentDAO.class);
		
		LOGGER.info("{}", componentDAO);
		
	}
}
if you find No bean found exception the problem could be either of these two things
1)you have not define @component /@serivces
2)The other one is the absence of a ComponentScan
ComponenScan is like a serch so spring needs to find the components present in the package

Lifecycle of a Bean-
@PostConstruct and @PreDestroy

when we put @component on a bean the entire life cycle of this bean will be mangaed bu spring so the spring ioc will create instance this bean and it will aslo make sure it will destroy when ot is not need so the entire life cycle of this bean is maintained by spring ioc container 
let say i want do certain things the creation of this particular bean or i want do before this bean is destryod
one of  the spring ioc container does is autowire in the dependencied,so depending on wheteher you are using setter injection or constructor injection it will make sure that the appropriate thing is called and all dependencies which have been define.

@PostConstruct : it will executed when all dependency are populated and only then you would to do certain actions.those kind of thigs can be perform in something called PostConstruct ie as soon as bean is created and initailized with the dependencies,
the postconstruct method will be called.
A similar method which is present just before destroying,so this called PreDestroy this is called just before bean is removed out of the context this specific PreDestry Method is called
package com.in28minutes.spring.basics.springin5steps.basic;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
public class BinarySearchImpl {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass()); 

	@Autowired
	@Qualifier("bubble")
	private SortAlgorithm sortAlgorithm;
	
	public int binarySearch(int[] numbers, int numberToSearchFor) {

		int[] sortedNumbers = sortAlgorithm.sort(numbers);
		System.out.println(sortAlgorithm);
		// Search the array
		return 3;
	}
	
	@PostConstruct
	public void postConstruct() {
		logger.info("postConstruct");
	}

	@PreDestroy
	public void preDestroy() {
		logger.info("preDestroy");
	}

}

Container and Dependency injection(CDI) @Named,@Inject
it is like interface it defines the different annotations(@Named)and CDI implementation framework would provide the fuctionality.instead of using @Componet i can use @Named,we change @inject in place of @Autowire no problem because spring implement CDI.INSTEAD OF SPRING ANNOTATION WE CAN USED CDI ANNOTATIONS
 ADD DEPENDENCY IN POM FILE
 <dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
import javax.inject.Inject;
import javax.inject.Named;

@Named
public class SomeCdiBusiness {
	
	@Inject
	SomeCdiDao someCdiDao;

	public SomeCdiDao getSomeCDIDAO() {
		return someCdiDao;
	}

	public void setSomeCDIDAO(SomeCdiDao someCdiDao) {
		this.someCdiDao = someCdiDao;
	}
}


Removing Spring Boot in Basic Application
package com.in28minutes.spring.basics.springin5steps;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.in28minutes.spring.basics.springin5steps.basic.BinarySearchImpl;

@Configuration
@ComponentScan
public class SpringIn5StepsBasicApplication {

	public static void main(String[] args) {

		ApplicationContext applicationContext =
				new AnnotationConfigApplicationContext(SpringIn5StepsBasicApplication.class);
		
		BinarySearchImpl binarySearch = 
				applicationContext.getBean(BinarySearchImpl.class);

		BinarySearchImpl binarySearch1 = 
				applicationContext.getBean(BinarySearchImpl.class);

		System.out.println(binarySearch);
		System.out.println(binarySearch1);
		
		int result = 
				binarySearch.binarySearch(new int[] { 12, 4, 6 }, 3);
		System.out.println(result);
	}
}

Before spring boot how we working 
The thing which we have added in are @configuration,@configuration defines that is a spring configuration in java if you want to define a spring configuration,we used the @configuration
@componentScan defines that this specific package needs to be scanned for components
The other thing which we have done is use AnnotationConfigApplication context to create the application context.
The other thing what we changed in the pom xml we remove spring starter and we added 
<groupid>org.springframeword</groupId>
<artifactid>spring-core</artifactId>

Add Logback and Close Appliation Context
Closing the Application Context using try and Catch,it will automatically close App Context when some errors occurs

/src/main/java/com/in28minutes/spring/basics/springin5steps/SpringIn5StepsBasicApplication.java
package com.in28minutes.spring.basics.springin5steps;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

import com.in28minutes.spring.basics.springin5steps.basic.BinarySearchImpl;

@Configuration
@ComponentScan
public class SpringIn5StepsBasicApplication {

	public static void main(String[] args) {

		try (AnnotationConfigApplicationContext applicationContext = 
				new AnnotationConfigApplicationContext(
				SpringIn5StepsBasicApplication.class)) {

			BinarySearchImpl binarySearch = 
					applicationContext.getBean(BinarySearchImpl.class);

			BinarySearchImpl binarySearch1 = 
					applicationContext.getBean(BinarySearchImpl.class);

			System.out.println(binarySearch);
			System.out.println(binarySearch1);

			int result = binarySearch.binarySearch(new int[] { 12, 4, 6 }, 3);
			System.out.println(result);
		}
	}
}

Defining Spring Application Context using xml -part 1 & 2

/src/main/java/com/in28minutes/spring/basics/springin5steps/SpringIn5StepsXMLContextApplication.java
package com.in28minutes.spring.basics.springin5steps;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.in28minutes.spring.basics.springin5steps.xml.XmlPersonDAO;

@Configuration
@ComponentScan
public class SpringIn5StepsXMLContextApplication {

	public static void main(String[] args) {

		try (ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"applicationContext.xml")) {

			XmlPersonDAO personDao = applicationContext.getBean(XmlPersonDAO.class);
			System.out.println(personDao);
			System.out.println(personDao.getXmlJdbcConnection());
		}
	}
}



/src/main/java/com/in28minutes/spring/basics/springin5steps/xml/XmlJdbcConnection.java
package com.in28minutes.spring.basics.springin5steps.xml;

public class XmlJdbcConnection {
	public XmlJdbcConnection() {
		System.out.println("JDBC Connection");
	}
}
/src/main/java/com/in28minutes/spring/basics/springin5steps/xml/XmlPersonDAO.java
package com.in28minutes.spring.basics.springin5steps.xml;

public class XmlPersonDAO {

	XmlJdbcConnection xmlJdbcConnection;

	public XmlJdbcConnection getXmlJdbcConnection() {
		return xmlJdbcConnection;
	}

	public void setXmlJdbcConnection(XmlJdbcConnection jdbcConnection) {
		this.xmlJdbcConnection = jdbcConnection;
	}
}



/src/main/resources/application.properties
#logging.level.org.springframework = debug
/src/main/resources/applicationContext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="xmlJdbcConnection" 
    	class="com.in28minutes.spring.basics.springin5steps.xml.XmlJdbcConnection">
    </bean>

    <bean id="xmlPersonDAO" class="com.in28minutes.spring.basics.springin5steps.xml.XmlPersonDAO">
    		<property name="xmlJdbcConnection" ref="xmlJdbcConnection"/>
    </bean>

</beans>

we have defined the beans for loading using xml, we defined XMLPersonDAO,we defined XmlJdbcConnection we also define XML,SO WE CREATED AN APPLICATION CONTEXT DOT XML,THAT WE CAN USE TO LOAD THE BEANS UP.WE ARE MANUALLY CREATING THE BEANS,AND ALSO AUTO-WIRING THE XMLJdbcConnection into the xmlPersonDAO.Now we would to launch up this application context,so we will need to create an application file for that(Spring5stepsXMLContextApplication).for loading the java context up,we use AnnotationConfigApplicationContext right?so similar to that there is something called ClaspathXMLApplicationContext.so we create a ClaspathXMLApplicationContext in this e will location of xml file.
what we are using is xml application context.and we are trying to load the beam  personDAO from it,if we look we not using any annotation here,we have define and dependency in xml file and load in springxml file,as bean increase the size of the file will be increase and difficult to maintain,before annotation it is difficult to manage the bean and dependency



Mixing xml context with component scan for beans defined with annotaion..


/src/main/resources/applicationContext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
	
	<context:component-scan base-package="com.in28minutes.spring.basics"/>// we want to load the bean which are present in the other packagehow can we load in xml configuration,in this it will load all the bean present in that package

    <bean id="xmlJdbcConnection" 
    	class="com.in28minutes.spring.basics.springin5steps.xml.XmlJdbcConnection">
    </bean>

    <bean id="xmlPersonDAO" class="com.in28minutes.spring.basics.springin5steps.xml.XmlPersonDAO">
    		<property name="xmlJdbcConnection" ref="xmlJdbcConnection"/>
    </bean>

</beans>




So here we are actually using a combination we have for some of the bean we defining and multilying them(object),for the other beans we using a component scan to load themp up.


package com.in28minutes.spring.basics.springin5steps;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.in28minutes.spring.basics.springin5steps.xml.XmlPersonDAO;

public class SpringIn5StepsXMLContextApplication {

	private static Logger LOGGER = LoggerFactory.getLogger(SpringIn5StepsScopeApplication.class);

	public static void main(String[] args) {

		try (ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(
				"applicationContext.xml")) {

			LOGGER.info("Beans Loaded -> {}", (Object) applicationContext.getBeanDefinitionNames());
			// [xmlJdbcConnection, xmlPersonDAO]
			//it will load (show)all the beam present in side the package we are using object to store more than one bean

			XmlPersonDAO personDao = applicationContext.getBean(XmlPersonDAO.class);

			LOGGER.info("{} {}", personDao, personDao.getXmlJdbcConnection());
		}
	}
}

IOC CONTAINER VS APPLICATION CONTEXT VS BEAN FACTORY
WHAT IS IOC CONTAINER
Public class WelcomeController 
{
	private WelcomeService service = new WelcomeService();

}
WelcomeService is a dependency of the WelcomeController.So the WelcomeController directly creates an instances off it.this means that is tightly coupled with us.
@Component
Public class WelcomeContoller
{
	@Autowired
	private WelcomeService service;

}
@component

public class WelcomeService
{
	
}
However when we use spring then we would do this above.all above operation creating bean and dependency will be done by Spring Framework
Here we are inverting the control,previosly the controller of creating welcomeservice and the control of creating the dependency was with bean itself,but now we shifting the responsibility out to spring.this is called invenstion of control.

And the program or the framework which provides this,called the IOC Container,The IOC Container is the one which manages these Beans

In spring there are two implementation of the IOC Container.one is the Application Context secound is Bean Factory, in all the example that we working now we have been making use Application Context.
because Spring Recomeded to use Application Context in 99% of these scenarios.
Now what is the difference between an Application Context and Bean Factory
Application Factory is nothing but Bean Factory ++..
The core features of spring are inside the jar called Spring-Core.And that's what the Bean Factory provides.
Bean Factory provides the basic management for Beans and wiring of dependency that's it it doest provide anything more.
The Application Context provide more features than a  Bean Factory it provide all features that are typically meeded by Enterprise Applications
Features that Application Context Provide
1)Spring's AOP features
2)Internationlization
3)WebApplicationContext for web Applications
if a device which has very less meomoy then we have go for Bean Factory

34)@Component vs @Service vs @Repository vs @Controller
@Component -Generic Component
@Repository - encapsulating storage,retrieval,and search behavior typically from a relational Database
@Service -- Business Logic
@Controller - Controller in MVC Pattern

src/main/java/com/in28minutes/spring/basics/componentscan/ComponentDAO.java
package com.in28minutes.spring.basics.componentscan;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository  // This annotation is used to retrive data from database
public class ComponentDAO {

	@Autowired
	ComponentJdbcConnection jdbcConnection;

	public ComponentJdbcConnection getJdbcConnection() {
		return jdbcConnection;
	}

	public void setComponentJdbcConnection(ComponentJdbcConnection jdbcConnection) {
		this.jdbcConnection = jdbcConnection;
	}
}

src/main/java/com/in28minutes/spring/basics/springin5steps/basic/BinarySearchImpl.java
package com.in28minutes.spring.basics.springin5steps.basic;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

@Service    ///This annotation is used in Bussiness Logic
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
public class BinarySearchImpl {
	
	private Logger logger = LoggerFactory.getLogger(this.getClass()); 

	@Autowired
	@Qualifier("bubble")
	private SortAlgorithm sortAlgorithm;
	
	public int binarySearch(int[] numbers, int numberToSearchFor) {

		int[] sortedNumbers = sortAlgorithm.sort(numbers);
		System.out.println(sortAlgorithm);
		// Search the array
		return 3;
	}
	
	@PostConstruct
	public void postConstruct() {
		logger.info("postConstruct");
	}

	@PreDestroy
	public void preDestroy() {
		logger.info("preDestroy");
	}

}
/src/main/java/com/in28minutes/spring/basics/springin5steps/basic/BubbleSortAlgorithm.java
package com.in28minutes.spring.basics.springin5steps.basic;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

@Service
@Qualifier("bubble")
public class BubbleSortAlgorithm implements SortAlgorithm {
	public int[] sort(int[] numbers) {
		// Logic for Bubble Sort
		return numbers;
	}
}
/src/main/java/com/in28minutes/spring/basics/springin5steps/basic/QuickSortAlgorithm.java
package com.in28minutes.spring.basics.springin5steps.basic;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

@Service
@Qualifier("quick")
public class QuickSortAlgorithm implements SortAlgorithm {
	public int[] sort(int[] numbers) {
		// Logic for Quick Sort
		return numbers;
	}
}


Read the value from Property file @value
...................


....................................
/src/main/resources/app.properties
external.service.url=http://someserver.dev.com/service
....................................... 



/src/main/java/com/in28minutes/spring/basics/springin5steps/properties/SomeExternalService.java
package com.in28minutes.spring.basics.springin5steps.properties;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class SomeExternalService {
	
	@Value("${external.service.url}")  /// we are getting the value from the property file using the @value annotation
	private String url;
	
	public String returnServiceURL(){
		return url;                  //returning the url 
	}

}



package com.in28minutes.spring.basics.springin5steps;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.in28minutes.spring.basics.springin5steps.properties.SomeExternalService;

@Configuration
@ComponentScan
// 
@PropertySource("classpath:app.properties")        //Scanning the Property file and loading the property file
public class SpringIn5StepsPropertiesApplication {

	public static void main(String[] args) {

		try (AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(
				SpringIn5StepsPropertiesApplication.class)) {

			SomeExternalService service = applicationContext.getBean(SomeExternalService.class);
			System.out.println(service.returnServiceURL());
		}
	}
}

...............................................................









